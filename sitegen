#!/usr/bin/env python3
#
# A static site generator, but written in python rather than bash for better
# portability and readability.
#
# For use in places such as github static sites and tilde.town that don't have
# another way to publish content.
#
# Requirements: python markdown module. 
#   Install it either via `pip install markdown` or through your system.

'''
Usage: sitegen INPUT.md [OPTIONS]

INPUT must be a Markdown file (.md)

OPTIONS are:
 -h: provides this help information
 -d DIRECTORY: publishes the file in specified DIRECTORY
 -a: publishes an article, including a last modified timestamp

If no DIRECTORY specified with -d, it will create file named INPUT.html in the
same directory as INPUT.

This is experimental and, as such, there might be bugs still left. Please 
keep this in mind.
'''

import os
import sys
import datetime

from markdown import markdown

# Change this into the template you wish to use. 
# See the example one provided in the repo for more information.
TEMPLATE = os.path.realpath("template.html")

# The "root address" of your site. Different from the domain, because we need
# the full https:// stuff for SEO:
SITEROOT = 'https://vitorsonoki.github.io/'

# Align this with the fields from the template file
TEMPLATE_CONTENTS = {
    'title': "",
    'description': "",
    'canonical': "",
    'content': "",
}

# Helps when developing:
DEBUG = True

START_DIR=os.path.realpath('.')

def convert(page, targetdir, is_article=False):
    '''
    Converts a markdown file into HTML by "baking" it into the template.
    '''
    global TEMPLATE
    global START_DIR

    # Suck data from our available stuff:
    with open(TEMPLATE,'r') as template:
        template_contents = template.read()

    # Find out the publishing directory path to "search" for things:
    fd = os.path.realpath(page)
    finaldir = "/".join(fd.split("/")[:-1])
    pagefile = fd.split('/')[-1]

    # Get the "URL Fragment" to make a canonical link:
    urlpath = fd.split('/')

    # I sometimes shorten the git repo to a different name. Let's store
    # that in a variable so we get no errors. What's the name of this very
    # directory we're in?
    repo_dir = os.path.realpath('.').split('/')[-1]

    url = "/".join(urlpath[urlpath.index(repo_dir)+1:-1])
    TEMPLATE_CONTENTS['canonical'] = SITEROOT + url

    if DEBUG:
        print("Changing to publishing directory %s..." % finaldir)
    os.chdir(finaldir)

    with open(pagefile,'r') as original:
        raw_content = original.read()

    # Assume first H1 is also the page's title (makes sense in Markdown)
    TEMPLATE_CONTENTS['title'] = raw_content.split('\n')[0][2:]

    # What should we do for the <meta description> tag? If in doubt, use the title:
    try:
        with open('description','r') as desc:
            short_desc = desc.read()
    except FileNotFoundError:
        short_desc = TEMPLATE_CONTENTS['title']

    TEMPLATE_CONTENTS['description'] = short_desc

    # If we're publishing a blog article (in contrast to a generic page) also
    # append the last modified date and other metadata into it:
    if is_article:
        with open("pubdate",'r') as pdate:
            pubdate = pdate.read()
        with open("categories",'r') as cfile:
            cats = cfile.read()

        categories = cats.split("\n")
        categories.pop()

        raw_content += '''

Publicado em %s

Categorizado em: ''' % (pubdate)
        for cat in categories:
            raw_content += "[%s](/blog/tags/%s) " % (cat, cat)

        raw_content +="\n\n"

    # Bake everything
    TEMPLATE_CONTENTS['content'] = markdown(raw_content)

    with open(pagefile.replace(".md",".html"), 'w') as newpage:
        # Remember the format:
        # final = self.template_contents.format(**self.fields)
        finalpage = template_contents.format(**TEMPLATE_CONTENTS)
        newpage.write(finalpage)
        print('Page "%s" converted successfully.' % TEMPLATE_CONTENTS['title'])

    os.chdir(START_DIR)

# Makes index of a directory, like a blog:
def make_index(targetdir):
    '''
    Make an index.html-like page, which links out to every page in the 
    category.

    If subpages with an index.html, points to parent

    Parameters:
    targetdir - the publishing directory
    '''
    global TEMPLATE
    global START_DIR
    
    # Finish by adding a list of posts, updates, etc
    
    # Suck data from our available stuff:
    with open(TEMPLATE,'r') as template:
        template_contents = template.read()

    raw_content = """
# Artigos

Estes são todos os artigos publicados no nosso blog até agora:

"""
    # move to referred directory to start indexing:
    os.chdir(targetdir)
    if DEBUG:
        print("Changed to %s" % os.path.realpath('.'))

    # We need to sort them by published date (newer to older). Use this:
    artlist = []

    # categories to sort articles out afterwards:
    cat_list = []

    for item in os.listdir('.'):
        # We might have directories, or loose HTML files here. Scan:
        if DEBUG:
            print("Found item %s " % item)
        if os.path.isdir(item):
            if DEBUG:
                print("Changing into %s" % item)
            os.chdir(item)

            # is there a published article here? If not, move to the next
            if not os.path.isfile('index.md'):
                if DEBUG:
                    print("There isn't a finished .md file here. Skipping.")
                os.chdir('..')
                continue 

            # blog page directory has index.md, pubdate and categories:
            with open('index.md','r') as original:

                # Get the title information and the URL to link out to.
                raw = original.read()
                pagetitle = raw.split('\n')[0][2:]
                if DEBUG:
                    print("Title of page is: %s" % pagetitle)

                # Get the "blurb" of the article (first two paragraphs):
                blurb = raw.split('\n')[2]
                blurb += '\n\n'
                blurb += raw.split('\n')[4]

                # the url is the directory, since we're dealing with index
                url = "/blog/" + item + '/'
                if DEBUG:
                    print("URL of page is: %s" % url)

            # The pubdate comes from 'pubdate' file (duh?)
            with open('pubdate', 'r') as pubdate:
                timestamp = pubdate.read()

            # Categories are one on each line, a little more tricky:
            with open('categories', 'r') as catsfile:
                raw = catsfile.read()
                categories = raw.split('\n')

            # There's always a pesky newline. Get rid of it:
            categories.pop()

            # Append everthing as a tuple, so we can sort by timestamp:
            article_tuple = (timestamp, pagetitle, url, blurb, categories)
            artlist.append(article_tuple)

            # now that everything is searched inside the directory, move out
            os.chdir('..')

        else:
            if DEBUG:
                print("Skipping non-directory '%s'" % item)
        
    # Done sorting through the blog directory? Excellent. Move back!
    os.chdir('..')
    if DEBUG:
        print("Finished searching for articles. Moving to %s" % os.path.realpath('.'))

    print("We got %s articles in here" % len(artlist))
    artlist.sort(reverse=True) # newer first.
        
    for page in artlist:
        # "stretch" the category list into a string:
        categories = ""
        for cat in page[4]:
            categories += ("[" + cat + "](/blog/tags/" + cat + ") ")
        if DEBUG:
            print("Categories are %s" % categories)

        raw_content += '<section class="article">'
        raw_content += markdown("""
### [%s](%s) 

%s

Publicado em %s em: %s
""" % (page[1], page[2], page[3], page[0], categories))
        raw_content += '</section>'

    raw_content += "\n"
    
    # Bake the content at the directory
    content = markdown(raw_content)

    with open(targetdir + 'index.html', 'w') as indexfile:
        # now there's a "description" tag as well:
        indexfile.write(template_contents % ("Índice de artigos", "Todos os arquivos do blog do Raspberry Pi", SITEROOT + 'blog/', content))

def helper():
    '''
    Instructions for this program.
    '''
    print(__doc__)

if __name__ == "__main__":
    # Argument parser, always fun to do!
    args = sys.argv

    # I always have to do this little routine. Is there a better way?
    args.reverse()
    args.pop()
    args.reverse() # now the arguments exclude the program name!

    filelist = []
    pubdir = './'
    article = False
    index = False
    
    counter = 0
    while counter < len(args):
        argument = args[counter]
        if argument[0] == "-":
            if argument == "--help" or argument == "-h":
                helper()
                sys.exit(0)
            elif argument == "-d" or argument == "--directory":
                try:
                    pubdir = args[counter + 1]
                    counter += 1
                except IndexError:
                    print("Error: no directory specified after -d")
                    sys.exit(1)
            elif argument == "-a" or argument == "--article":
                article = True
            elif argument == "-i" or argument == "--index":
                index = True
            else:
                print("Error: unknown option %s" % argument)
                helper()
                sys.exit(1)
        else:
            # Must be a file to be converted!
            filelist.append(argument)
        counter += 1

    # dry-run to see if arguments are correctly parsed:
    if DEBUG:
        print("Publication directory: %s" % pubdir)
        print("Files:")
        for i in filelist:
            print(" - %s" % i)

    if not index and len(filelist) == 0:
        print("Error: no files given to convert!")
        sys.exit(1)

    if index:
        make_index(pubdir)

    else:
        for page in filelist:
            convert(page, pubdir, article)
        
    sys.exit(0)
